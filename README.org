#+TITLE: ekg

* Design of ekg
The =ekg= module is a simple but opinionated note taking application. It is a
substitute for such other emacs applications such as =org-roam= or =denote=. ekg
stands for /emacs knowledge graph/.

There are a few core ideas driving the design of ekg. The first is that a title
and a tag are the same thing. This isn't unique to ekg, other tools such as
Logseq also consider tags to be equivalent to pages of the same name, although
this functionality is limited since tags can only be just one word. In org-roam,
a tag is just a tag, so you can have a note called "emacs" and a tag called
"emacs", but these are not related. ekg takes the idea a step further: there are
(mostly) no titles, only tags. So, instead of writing text in a note called
"emacs", just write a note and tag it with "emacs". There is no "title", only
tags. If you write another note about emacs, also tag it "emacs", and maybe
something else too. Or tag it something more involved, like an idea: "emacs's
power derives from putting all data in buffers, and making all commands deal
with buffers." That's a perfectly fine tag, and if you notice a connecting idea,
you can tag it with this as well.

The advantage of this method is that it solves something that has bothered me
for a while about the recent suite of tools like org-roam: backlinks are
non-symmetrical. If you enter a note in your org-roam daily about emacs, and
link it to the emacs note, then when you go to the emacs note, you have to
explicitly enable the backlinks buffer to see the daily entry where you first
entered it. Systems such as Logseq and the original Roam have backlinks
alongside normal content, but this doesn't seem possible in emacs, where a
buffer of a file is expected show the file, and tricks with overlays can't solve
the issue. Even if it could, I want a system in which it doesn't matter where
you enter the data, it shows up in the original place the same as everywhere
else it is linked to, not as a backlink, but just as part of the content. Having
notes with no title, only tags, makes this possible, because there is no longer
a difference between linking and writing in the context in, both are denoted by
tags.

As a consequence of this design, notes can be small, because to add another note
to a subject, you don't need to append to an existing note, you can create
another note.

Additionally, ekg has another key difference: it uses =sqlite= instead of the
filesystem. When notes are small and do not have titles, files don't make a lot
of sense anymore. Additionally, the filesystem is limited. Even in org-roam,
which uses it, it needs to be augmented with sqlite anyway to enable fast
querying of tags and other operations. The sqlite-only approach also means it is
much easier to make certain kinds of changes, since they only involve changing
the database and not the text as well. In general, text and data are separated
as much as possible here, so there's no need or desire for the text to have to
store data as well, we leave that completely to the database.
* Prefixed tags
Another concept, loosely applied in =ekg= is that of tags with standard prefixes.
By default, date tags are prefixed with ="date/"=. This is a way to distinguish
date tags from other kinds of tags. Most tags shouldn't need it, but it often is
useful to have prefixes to group tags in some way. For instance, perhaps all
idea tags should be prefixed with ="idea/"=. In my ekg repository I use in my
company, I have ="person/"= as a tag prefix for my coworker's username.

The benefit of this is that it's now possible to narrow in on just tags of a
certain type if necessary.
* Warning
ekg is a brand new package, and as such, there may be significant bugs.  It has not yet had an initial release, but I hope to release something soon.  The initial release will be accompanied by putting this package on a site such as MELPA or GNU ELPA.

* Installation
Currently ekg is not part of any package archive. It requires the [[https://github.com/ahyatt/triples][triples]]
package, which is a way to express a graph in sqlite in emacs, alongside basic
querying functionality.

=triples= is on GNU ELPA, so can be installed via the package manager or
=use-package=. An example installation using =use-package= and =straight= is below:
#+begin_src emacs-lisp
(use-package triples)
(use-package ekg
  :straight '(ekg :type git :host github :repo "ahyatt/ekg")
  :bind (([f11] . ekg-capture)))
#+end_src

** TODO Add ekg to a package archive
* Setup
ekg allows flexibility in the note's major mode, which can be anything, in
theory. In reality, many modes are not suitable for notes.

The variable =ekg-capture-default-mode= will control what mode is on for new
notes. =ekg-capture-acceptable-modes= will control what modes can be set if you
want to change the mode. By default, it is set to =org-mode=, =markdown-mode=, and
=fundamental-mode=. The major mode is stored, alongside the note, and subsequent
edits of the note will be in the major mode of the note.

Because everything is tag based, deleting is done by just prepending "trash/" to
all tags. This enables the note to be recovered by going to the trash-prepending
tags (which are not part of auto-complete, but are there).

The database used by ekg is defined in =ekg-db-file=, which defaults to
=~/.emacs.d/ekg.db=.

* Usage
To create a note, run =ekg-capture= to capture a text note, or =ekg-capture-url= to
capture a website. The note will, by default, be tagged with the current date.
This can be changed by changing the variable =ekg-capture-auto-tag-funcs=, which
is a series of functions that are called and can add tags.

At the top of the note is a special section, which will be unfamiliar. This is
the metadata section, where it stores and displays editable metadata, notably
tags, but possibly other data such as URLs. If you want to change tags, just
edit them in the metadata section. Tags should autocomplete based on the
tags available to use.

The basic read operation in =ekg= is to show a list of notes with the same tag,
=ekg-show-tag=. This shows all notes tagged with the current tag. =ekg-show-tag-any=
is similar, but allows showing notes that match any of a series of tags.

To show a tag that is tagged as the current day, you can use =ekg-show-today=.

In a tag buffer, you can use the following keys:
  - =n=, =p= to navigate up and down the notes.
  - =c= to create a note with the current tag.
  - =d= to delete the note, which will prompt to make sure you mean it.
  - =g= to refresh the buffer, which shouldn't be necessary in most cases.
  - =o= to open the current note.
  - =r= to remove the current tag(s) from the note.
  - =a= to show a new buffer with any of the tags from any of the notes.  

This last command, =a=, for =ekg-notes-any-tags=, is notable; it allows the user to
expand the tags viewed to encompass all of the tag space in the current view.
For example, if there are three notes in an "emacs" tag buffer, one tagged
"emacs" and "2022-10-02", one tagged "emacs" and "vi", and one tagged "emacs",
"buffer", and "imenu", it would open a buffer as if the user had run
=ekg-show-tags-any= with the arguments as if it was invoked like:
#+begin_src emacs-lisp
ekg-show-tag-any('("emacs", "2022-10-02", "vi", "buffer", "imenu"))
#+end_src
The subsequent buffer can again be expanded. Each expansion brings more
of the surrounding contextual note-space to view.

There is another command =ekg-show-tags-all= which will show notes who have all
the tags specified (basically an =AND= of the tags). However, the resulting buffer
can also be expanded with =ekg-notes-any-tags=, which then switches to showing
notes with any of the tags on the screen (an =OR= of the tags).
* Importing from org-roam
You can import your notes from org-roam. This will turn all titles into tags,
and all links will become tags as well.

Titles and tags will have any commas removed, since commas are commonly used in
multiple completion as a separator, so anything with commas would otherwise cause
problems when selected.

If you do have tags you want to turn into prefixes (which is a good idea for
tags widely applied, which essentially act as a categorization), you can add
those tags to the list at =ekg-org-roam-import-tag-to-prefix=.  For example,
#+begin_src emacs-lisp
(setq ekg-org-roam-import-tag-to-prefix (append ekg-org-roam-import-tag-to-prefix '("idea" "person")))
#+end_src
Then, when a note is found that is tagged with ="idea"=, but with title "emacs is
a powerful tool", then the title will be turned into the tag ="idea/emacs is a
powerful tool"=, and anything linked with it will also get the same prefix.

To import from org-roam, in a =*scratch*= buffer or any your favorite elisp
execution method, run the following:

#+begin_src emacs-lisp
(require 'ekg-org-roam-import)
(ekg-org-roam-import)
#+end_src
